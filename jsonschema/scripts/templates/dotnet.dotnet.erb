<%- @schemas.each do |key, schema| -%>
<%= class_name(key) -%>.cs
using System;
using System.Collections.Generic;

// ------------------------------------------------------------------------------
// This code was generated based on the Cucumber JSON schema
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated.
// ------------------------------------------------------------------------------

namespace Io.Cucumber.Messages.Types;

/**
 * Represents the <%= class_name(key) %> message in Cucumber's message protocol
 * @see <a href="https://github.com/cucumber/messages" >Github - Cucumber - Messages</a>
 <%- unless (schema['description'] || []).empty? -%>
 *
<%= format_description(schema['description'], indent_string: '') %>
<%- end -%>
 */

public sealed class <%= class_name(key) %> 
{
  <%- schema['properties'].each do |property_name, property| 
      required = (schema['required'] || []).index(property_name) 
      isValueType = type_for(class_name(key), property_name, property) == "long" || type_for(class_name(key), property_name, property) == "bool"
  -%>
    <%- unless (property['description'] || []).empty? -%>
    /**
    <%= format_description(property['description'], indent_string: '    ') %>
     */
    <%- end -%>
    <%- if isValueType && !required -%>
    public Nullable<<%= type_for(class_name(key), property_name, property) -%>> <%= capitalize(property_name) %> { get; private set; }
    <%- else -%>
    public <%= type_for(class_name(key), property_name, property) -%> <%= capitalize(property_name) %> { get; private set; }
    <%- end -%>
  <%- end -%>

  <%- if (schema['required'] || []).empty? -%>
  <%- schema['properties'].each do |property_name, property| -%>

    public static <%= class_name(key) %> Create(<%= type_for(class_name(key), property_name, property) -%> <%= property_name %>) 
    {
        return new <%= class_name(key) %>(
        <%- schema['properties'].each_with_index do |(property_name_2, property_2), index| -%>
          <%- if property_name_2 == property_name -%>
            Require<<%= type_for(class_name(key), property_name, property) -%>>(<%= property_name %>, "<%= capitalize(property_name) %>", "<%= class_name(key) %>.<%= capitalize(property_name) %> cannot be null")<%= index < schema['properties'].length - 1 ? ',' : '' %>
          <%- else -%>
            null<%= index < schema['properties'].length - 1 ? ',' : '' %>
          <%- end -%>
        <%- end -%>
        );
    }
  <%- end -%>
  <%- end -%>

    public <%= class_name(key) %>(
    <%- schema['properties'].each_with_index do |(property_name, property), index| 
        isValueType = type_for(class_name(key), property_name, property) == "long" || type_for(class_name(key), property_name, property) == "bool"
        required = (schema['required'] || []).index(property_name) 
    -%>
    <%- if isValueType && !required -%>
        Nullable<<%= type_for(class_name(key), property_name, property) -%>> <%= property_name %><%= index < schema['properties'].length - 1 ? ',' : ''%>
    <%- else -%>
        <%= type_for(class_name(key), property_name, property) -%> <%= property_name %><%= index < schema['properties'].length - 1 ? ',' : ''%>
    <%- end -%>
    <%- end -%>
    ) 
    {
      <%- schema['properties'].each_with_index do |(property_name, property), index| 
          required = (schema['required'] || []).index(property_name) 
      -%>
      <% if required -%>
        RequireNonNull<<%= type_for(class_name(key), property_name, property) -%>>(<%= property_name %>, "<%= capitalize(property_name) %>", "<%= class_name(key) %>.<%= capitalize(property_name) %> cannot be null");
      <%- end -%>
      <%- if property['items'] -%>
        this.<%= capitalize(property_name) %> = new <%= type_for(class_name(key), property_name, property) -%>(<%= property_name %>);
      <%- else -%>
        this.<%= capitalize(property_name) %> = <%= property_name %>;
      <%- end -%>
      <%- end -%>
    }

    public override bool Equals(Object o) 
    {
        if (this == o) return true;
        if (o == null || this.GetType() != o.GetType()) return false;
        <%= class_name(key) %> that = (<%= class_name(key) %>) o;
        return <%- schema['properties'].each_with_index do |(property_name, property), index| %>
            <%- if (schema['required'] || []).index(property_name) -%>
            <%= capitalize(property_name) -%>.Equals(that.<%= capitalize(property_name) -%>)<%= index < schema['properties'].length-1 ? ' && ' : ';' -%>
            <%- else -%>
            Object.Equals(<%= capitalize(property_name) -%>, that.<%= capitalize(property_name) -%>)<%= index < schema['properties'].length-1 ? ' && ' : ';' -%>
            <%- end -%>
        <% end -%>

    }

    public override int GetHashCode() 
    {
        int hash = 17;
        <%- schema['properties'].each_with_index do |(property_name, property), index| 
        required = (schema['required'] || []).index(property_name) 
        isValueType = type_for(class_name(key), property_name, property) == "long" || type_for(class_name(key), property_name, property) == "bool"
        isEnum = property['enum']
        -%>
        <%- if isEnum -%>
          hash = hash * 31 + <%= capitalize(property_name) -%>.GetHashCode();  
        <%- elsif isValueType && !required -%>
        if (<%= capitalize(property_name) -%>.HasValue)
          hash = hash * 31 + <%= capitalize(property_name) -%>.Value.GetHashCode();
        <%- elsif isValueType -%>
          hash = hash * 31 + <%= capitalize(property_name) -%>.GetHashCode();  
        <%- else -%>
        if (<%= capitalize(property_name) -%> != null)
          hash = hash * 31 + <%= capitalize(property_name) -%>.GetHashCode();
        <%- end -%>
        <%- end -%>
        return hash;
    }

    public override string ToString() 
    {
        return "<%= class_name(key) %>{" +
        <%- schema['properties'].each_with_index do |(property_name, property), index| 
            required = (schema['required'] || []).index(property_name) 
            isValueType = type_for(class_name(key), property_name, property) == "long" || type_for(class_name(key), property_name, property) == "bool"
        -%>
        <%- if isValueType && !required -%>
            (<%= capitalize(property_name) -%>.HasValue ? "<%= index == 0 ? '' : ', '%><%= property_name %>=" + <%= capitalize(property_name) %>.Value : "") +
        <%- else -%>
            "<%= index == 0 ? '' : ', '%><%= property_name %>=" + <%= capitalize(property_name) %> +
        <%- end -%>
        <%- end -%>
            '}';
    }

    private static T Require<T>(T property, string propertyName, string errorMessage)
    {
      RequireNonNull<T>(property, propertyName, errorMessage);
      return property;
    }
    private static void RequireNonNull<T>(T property, string propertyName, string errorMessage) 
    {
      if (property == null) throw new ArgumentNullException(propertyName, errorMessage);
    }
}
<% end -%>