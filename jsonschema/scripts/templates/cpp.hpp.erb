<%- @schemas.each do |key, schema| -%>
<% myclass = underscore(class_name(key)) %>
<%= myclass %>.hpp
#pragma once

#include <vector>

#include <cucumber/message.hpp>
<%-
    incs = []
    schema['properties'].each do |property_name, property|
        type = underscore(type_for(class_name(key), property_name, property))
        if m = /std::vector<(?<vtype>.+)>/.match(type)
            type = m['vtype']
        end
        next if type.start_with?("std::")
        next if type == "bool"
        incs.append(type)
    end

    if incs.length > 0
-%>

    <%- incs.each do |type| -%>
#include <cucumber/messages/<%= type %>.hpp>
    <%- end -%>
<%- end -%>

namespace cucumber::messages {

//
// Represents the <%= class_name(key) %> message in Cucumber's message protocol
// @see <a href=https://github.com/cucumber/messages>Github - Cucumber - Messages</a>
<%- if not (schema['description'] || []).empty? -%>
//
<%= format_description(schema['description'], indent_string: '') %>
<%- end -%>
//
// Generated code

struct <%= myclass %> : cucumber::message
{
  <%- schema['properties'].each do |property_name, property| -%>
    <%- type = underscore(type_for(class_name(key), property_name, property)) -%>
    <%- if m = /std::vector<(?<vtype>.+)>/.match(type) -%>
        <%- if !m['vtype'].start_with?("std::") -%>
    std::vector<cucumber::messages::<%= m['vtype'] -%>> <%= underscore(property_name) %>;
        <%- else -%>
    <%= type -%> <%= underscore(property_name) %>;
        <%- end -%>
    <%- elsif !type.start_with?("std::") && type != "bool" -%>
    cucumber::messages::<%= type -%> <%= underscore(property_name) %>;
    <%- else -%>
    <%= type -%> <%= underscore(property_name) %>;
    <%- end -%>
  <%- end -%>

    std::string to_string() const;
};

}
<%= myclass %>.cpp
#include <sstream>

#include <cucumber/utils.hpp>
#include <cucumber/messages/<%= myclass %>.hpp>

namespace cucumber::messages {

std::string
<%= myclass %>::to_string() const
{
    std::ostringstream oss;

    oss
    <%- schema['properties'].each_with_index do |(property_name, property), index| -%>
    <%- type = underscore(type_for(class_name(key), property_name, property)) -%>
    <%- std_vec = /std::vector<std::.+>/.match(type) -%>
    <%- if std_vec -%>
        << "<%= index == 0 ? '' : ', '%><%= underscore(property_name) %>=" << cucumber::to_string(<%= underscore(property_name) %>)
    <%- else -%>
        << "<%= index == 0 ? '' : ', '%><%= underscore(property_name) %>=" << <%= underscore(property_name) %>
    <%- end -%>
    <%- end -%>
        ;

    return oss.str();
}

}<%- end -%>
