<%- @schemas.each do |key, schema| -%>
<%= underscore(class_name(key)) %>.rb
# frozen_string_literal: true

# The code was auto-generated by {this script}[https://github.com/cucumber/messages/blob/main/codegen/codegen.rb]
module Cucumber
  module Messages
    ##
    # Represents the <%= class_name(key) %> message in Cucumber's {message protocol}[https://github.com/cucumber/messages].
    ##
    <%= "#\n    " if schema['description'] %><%= format_description(schema['description']) %>
    class <%= class_name(key) %> < Message
    <%- schema['properties'].each do |property_name, property| -%>
      <%- if property['description'] -%>
      ##
      <%= format_description(property['description'], indent_string: '      ') %>
      <%- end -%>
      attr_reader :<%= underscore(property_name) %>

    <%- end -%>
      def initialize(
      <%- schema['properties'].each do |property_name, property| -%>
        <%- final_key = property_name == schema['properties'].keys.last -%>
        <%- individual_value = (schema['required'] || []).index(property_name) ? default_value(class_name(key), property_name, property) : 'nil' -%>
        <%= "#{underscore(property_name)}: #{individual_value}" -%><%= final_key ? '' : ',' %>
      <%- end -%>
      )
      <%- schema['properties'].each do |property_name, _property| -%>
        @<%= underscore(property_name) %> = <%= underscore(property_name) %>
      <%- end -%>
        super()
      end

      ##
      # Returns a new <%= class_name(key) %> from the given hash.
      # If the hash keys are camelCased, they are properly assigned to the
      # corresponding snake_cased attributes.
      #
      #   Cucumber::Messages::<%= class_name(key) %>.from_h(some_hash) # => #<Cucumber::Messages::<%= class_name(key) %>:0x... ...>
      ##
      def self.from_h(hash)
        return nil if hash.nil?

        new(
          <%-
            schema['properties'].each do |property_name, property|
              ref = property['$ref']
              items_ref = property.dig('items', '$ref')
          -%>
          <%- final_key = property_name == schema['properties'].keys.last -%>
          <%- comma = final_key ? '' : ',' -%>
          <%= "#{underscore(property_name)}: " -%>
          <%- if items_ref -%>hash[:<%= property_name -%>]&.map { |item| <%= class_name(items_ref) %>.from_h(item) }<%= comma %>
          <%- elsif ref -%><%= class_name(ref) %>.from_h(hash[:<%= property_name %>])<%= comma %>
          <%- else -%>hash[:<%= property_name %>]<%= comma %>
          <%- end -%>
          <%- end -%>
        )
      end
    end
  end
end
<% end -%>
