<%- @schemas.each do |key, schema| -%>
<%= class_name(key) %>.cs

// ------------------------------------------------------------------------------
// This code was generated based on the Cucumber JSON schema
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated.
// ------------------------------------------------------------------------------

namespace Io.Cucumber.Messages.Types;

/**
 * Represents the <%= class_name(key) %> message in Cucumber's message protocol
 * @see <a href="https://github.com/cucumber/messages" >Github - Cucumber - Messages</a>
 <%- unless (schema['description'] || []).empty? -%>
 *
<%= format_description(schema['description'], indent_string: '') %>
<%- end -%>
 */

public sealed record <%= class_name(key) %> 
{
  <%- schema['properties'].each do |property_name, property| 
      required = (schema['required'] || []).index(property_name)
  -%>
    <%- unless (property['description'] || []).empty? -%>
    /**
    <%= format_description(property['description'], indent_string: '    ') %>
     */
    <%- end -%>
    <%- if !required -%>
    public <%= type_for(class_name(key), property_name, property) %>? <%= capitalize(property_name) %> { get; }
    <%- else -%>
    public <%= type_for(class_name(key), property_name, property) %> <%= capitalize(property_name) %> { get; }
    <%- end -%>
  <%- end -%>

  <%- if (schema['required'] || []).empty? -%>
  <%- schema['properties'].each do |property_name, property| -%>

    public static <%= class_name(key) %> Create(<%= type_for(class_name(key), property_name, property) %> <%= property_name %>) 
    {
        return new <%= class_name(key) %>(
        <%- schema['properties'].each.with_index(1) do |(property_name_2, _property_2), index| -%>
          <%- if property_name_2 == property_name -%>
            <%= property_name %> ?? throw new ArgumentNullException("<%= capitalize(property_name) %>", "<%= class_name(key) %>.<%= capitalize(property_name) %> cannot be null")<%= index < schema['properties'].length ? ',' : '' %>
            <%- else -%>
            null<%= index < schema['properties'].length ? ',' : '' %>
          <%- end -%>
        <%- end -%>
        );
    }
  <%- end -%>
  <%- end -%>

    public <%= class_name(key) %>(
    <%- schema['properties'].each.with_index(1) do |(property_name, property), index|
        required = (schema['required'] || []).index(property_name) 
    -%>
    <%- if !required -%>
        <%= type_for(class_name(key), property_name, property) %>? <%= property_name %><%= index < schema['properties'].length ? ',' : ''%>
    <%- else -%>
        <%= type_for(class_name(key), property_name, property) %> <%= property_name %><%= index < schema['properties'].length ? ',' : ''%>
    <%- end -%>
    <%- end -%>
    ) 
    {
      <%- schema['properties'].each do |property_name, property|
          required = (schema['required'] || []).index(property_name) 
          isValueType = type_for(class_name(key), property_name, property) == 'long' || type_for(class_name(key), property_name, property) == 'bool' || property['enum'] != nil
      -%>
      <%- if !isValueType && required -%>
        this.<%= capitalize(property_name) %> = <%= property_name %> ?? throw new ArgumentNullException("<%= capitalize(property_name) %>", "<%= class_name(key) %>.<%= capitalize(property_name) %> cannot be null");
      <%- else -%>
        this.<%= capitalize(property_name) %> = <%= property_name %>;
      <%- end -%>
      <%- end -%>
    }
}
<% end -%>
