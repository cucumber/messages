<?php

declare(strict_types=1);

/**
 * This code was auto-generated by {this script}[https://github.com/cucumber/messages/blob/main/codegen/codegen.rb]
 */

namespace Cucumber\Messages;

use JsonSerializable;
use Cucumber\Messages\DecodingException\SchemaViolationException;

/**
 * Represents the GlobalHookFinished message in Cucumber's message protocol
 * @see https://github.com/cucumber/messages
 *
 */
final class GlobalHookFinished implements JsonSerializable
{
    use JsonEncodingTrait;

    /**
     * Construct the GlobalHookFinished with all properties
     *
     */
    public function __construct(

        /**
         * Identifier for the hook execution that has finished
         */
        public readonly string $globalHookStartedId = '',
        public readonly TestStepResult $result = new TestStepResult(),
        public readonly Timestamp $timestamp = new Timestamp(),
    ) {
    }

    /**
     * @throws SchemaViolationException
     *
     * @internal
     */
    public static function fromArray(array $arr): self
    {
        self::ensureGlobalHookStartedId($arr);
        self::ensureResult($arr);
        self::ensureTimestamp($arr);

        return new self(
            (string) $arr['globalHookStartedId'],
            TestStepResult::fromArray($arr['result']),
            Timestamp::fromArray($arr['timestamp']),
        );
    }

    /**
     * @psalm-assert array{globalHookStartedId: string|int|bool} $arr
     */
    private static function ensureGlobalHookStartedId(array $arr): void
    {
        if (!array_key_exists('globalHookStartedId', $arr)) {
            throw new SchemaViolationException('Property \'globalHookStartedId\' is required but was not found');
        }
        if (array_key_exists('globalHookStartedId', $arr) && is_array($arr['globalHookStartedId'])) {
            throw new SchemaViolationException('Property \'globalHookStartedId\' was array');
        }
    }

    /**
     * @psalm-assert array{result: array} $arr
     */
    private static function ensureResult(array $arr): void
    {
        if (!array_key_exists('result', $arr)) {
            throw new SchemaViolationException('Property \'result\' is required but was not found');
        }
        if (array_key_exists('result', $arr) && !is_array($arr['result'])) {
            throw new SchemaViolationException('Property \'result\' was not array');
        }
    }

    /**
     * @psalm-assert array{timestamp: array} $arr
     */
    private static function ensureTimestamp(array $arr): void
    {
        if (!array_key_exists('timestamp', $arr)) {
            throw new SchemaViolationException('Property \'timestamp\' is required but was not found');
        }
        if (array_key_exists('timestamp', $arr) && !is_array($arr['timestamp'])) {
            throw new SchemaViolationException('Property \'timestamp\' was not array');
        }
    }
}
