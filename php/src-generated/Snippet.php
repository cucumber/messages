<?php

declare(strict_types=1);

/**
 * This code was auto-generated by {this script}[https://github.com/cucumber/messages/blob/main/codegen/codegen.rb]
 */

namespace Cucumber\Messages;

use JsonSerializable;
use Cucumber\Messages\DecodingException\SchemaViolationException;

/**
 * Represents the Snippet message in Cucumber's message protocol
 * @see https://github.com/cucumber/messages
 *
 */
final class Snippet implements JsonSerializable
{
    use JsonEncodingTrait;

    /**
     * Construct the Snippet with all properties
     *
     */
    public function __construct(

        /**
         * The programming language of the code.
         *
         * This must be formatted as an all lowercase identifier such that syntax highlighters like [Prism](https://prismjs.com/#supported-languages) or [Highlight.js](https://github.com/highlightjs/highlight.js/blob/main/SUPPORTED_LANGUAGES.md) can recognize it.
         * For example: `cpp`, `cs`, `go`, `java`, `javascript`, `php`, `python`, `ruby`, `scala`.
         */
        public readonly string $language = '',

        /**
         * A snippet of code
         */
        public readonly string $code = '',
    ) {
    }

    /**
     * @throws SchemaViolationException
     *
     * @internal
     */
    public static function fromArray(array $arr): self
    {
        self::ensureLanguage($arr);
        self::ensureCode($arr);

        return new self(
            (string) $arr['language'],
            (string) $arr['code'],
        );
    }

    /**
     * @psalm-assert array{language: string|int|bool} $arr
     */
    private static function ensureLanguage(array $arr): void
    {
        if (!array_key_exists('language', $arr)) {
            throw new SchemaViolationException('Property \'language\' is required but was not found');
        }
        if (array_key_exists('language', $arr) && is_array($arr['language'])) {
            throw new SchemaViolationException('Property \'language\' was array');
        }
    }

    /**
     * @psalm-assert array{code: string|int|bool} $arr
     */
    private static function ensureCode(array $arr): void
    {
        if (!array_key_exists('code', $arr)) {
            throw new SchemaViolationException('Property \'code\' is required but was not found');
        }
        if (array_key_exists('code', $arr) && is_array($arr['code'])) {
            throw new SchemaViolationException('Property \'code\' was array');
        }
    }
}
