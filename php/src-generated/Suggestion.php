<?php

declare(strict_types=1);

/**
 * This code was auto-generated by {this script}[https://github.com/cucumber/messages/blob/main/codegen/codegen.rb]
 */

namespace Cucumber\Messages;

use JsonSerializable;
use Cucumber\Messages\DecodingException\SchemaViolationException;

/**
 * Represents the Suggestion message in Cucumber's message protocol
 * @see https://github.com/cucumber/messages
 *
 * A suggested fragment of code to implement an undefined step */
final class Suggestion implements JsonSerializable
{
    use JsonEncodingTrait;

    /**
     * Construct the Suggestion with all properties
     *
     * @param list<Snippet> $snippets
     */
    public function __construct(

        /**
         * A unique id for this suggestion
         */
        public readonly string $id = '',

        /**
         * The ID of the `PickleStep` this `Suggestion` was created for.
         */
        public readonly string $pickleStepId = '',

        /**
         * A collection of code snippets that could implement the undefined step
         */
        public readonly array $snippets = [],
    ) {
    }

    /**
     * @throws SchemaViolationException
     *
     * @internal
     */
    public static function fromArray(array $arr): self
    {
        self::ensureId($arr);
        self::ensurePickleStepId($arr);
        self::ensureSnippets($arr);

        return new self(
            (string) $arr['id'],
            (string) $arr['pickleStepId'],
            array_values(array_map(fn (array $member) => Snippet::fromArray($member), $arr['snippets'])),
        );
    }

    /**
     * @psalm-assert array{id: string|int|bool} $arr
     */
    private static function ensureId(array $arr): void
    {
        if (!array_key_exists('id', $arr)) {
            throw new SchemaViolationException('Property \'id\' is required but was not found');
        }
        if (array_key_exists('id', $arr) && is_array($arr['id'])) {
            throw new SchemaViolationException('Property \'id\' was array');
        }
    }

    /**
     * @psalm-assert array{pickleStepId: string|int|bool} $arr
     */
    private static function ensurePickleStepId(array $arr): void
    {
        if (!array_key_exists('pickleStepId', $arr)) {
            throw new SchemaViolationException('Property \'pickleStepId\' is required but was not found');
        }
        if (array_key_exists('pickleStepId', $arr) && is_array($arr['pickleStepId'])) {
            throw new SchemaViolationException('Property \'pickleStepId\' was array');
        }
    }

    /**
     * @psalm-assert array{snippets: array} $arr
     */
    private static function ensureSnippets(array $arr): void
    {
        if (!array_key_exists('snippets', $arr)) {
            throw new SchemaViolationException('Property \'snippets\' is required but was not found');
        }
        if (array_key_exists('snippets', $arr) && !is_array($arr['snippets'])) {
            throw new SchemaViolationException('Property \'snippets\' was not array');
        }
    }
}
